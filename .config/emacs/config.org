#+TITLE: Yonei's Emacs config
#+AUTHOR: Yonei <yonei@proton.me>
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of contents :toc:
- [[#important-stuff-to-load-first][Important stuff to load first]]
  - [[#add-the-scripts-directory-to-path][Add the scripts directory to path]]
  - [[#source-the-scripts][Source the scripts]]
  - [[#evil-mode][Evil mode]]
  - [[#keybinds][Keybinds]]
- [[#visual-tweaks][Visual tweaks]]
  - [[#reset-default-interface-styling][Reset default interface styling]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
- [[#org-mode][Org mode]]
  - [[#table-of-contents][Table of contents]]
  - [[#org-bullets][Org bullets]]
  - [[#wysiwyg][WYSIWYG]]
  - [[#visual-tweaks-1][Visual tweaks]]

* Important stuff to load first
** Add the scripts directory to path
#+begin_src elisp
(add-to-list 'load-path (expand-file-name "scripts" user-emacs-directory))
#+end_src

** Source the scripts
#+begin_src elisp
(require 'elpaca-bootstrap)  ;; Elpaca package manager setup
#+end_src

** Evil mode
#+begin_src elisp
;; Enable Evil
(use-package evil
  :elpaca t
  :init
  (setq evil-want-keybinding nil)
  (evil-mode))

;; Evil mode functionality for various other tools
(use-package evil-collection
  :elpaca t
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
#+end_src

** Keybinds
#+begin_src elisp
(use-package general
  :elpaca t
  :config
  (general-evil-setup)

  ;; Set 'SPC' as global leader key
  (general-create-definer yonei/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; leader key
    :global-prefix "M-SPC") ;; leader key for insert mode

  (yonei/leader-keys
    "." '(find-file :wk "File search")
    "," '(switch-to-buffer :wk "Switch to buffer")

    "b" '(:ignore t :wk "buffer")
    "b i" '(ibuffer :wk "iBuffer")
    "b k" '(kill-this-buffer :wk "Kill current buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")

    "w" '(:ignore t :wk "window")
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w c" '(delete-window :wk "Close current window")

    "f" '(:ignore t :wk "file")
    "f r" '(recentf :wk "Find recent files")
    "f c" '((lambda () (interactive)
              (find-file (expand-file-name "config.org" user-emacs-directory)))
            :wk "Open emacs config.org")

    "h" '(:ignore t :wk "help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h r r" '((lambda () (interactive)
                (load-file user-init-file)
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")))
#+end_src

*** Which-key
#+begin_src elisp
(use-package which-key
  :elpaca t
  :init
  (which-key-mode 1)
  :config
  (setq which-key-popup-type 'minibuffer
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
#+end_src


* Visual tweaks
** Reset default interface styling
*** Disable menubar and scrollbars
#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

*** Display line numbers and truncated lines
#+begin_src elisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Theme
#+begin_src elisp
(use-package doom-themes
  :elpaca t
  :config
  ;; Global settings (defaults)
  ;; Set either to nil to universally disable
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

** Fonts
TODO: Adjust this later
#+begin_src elisp
(set-face-attribute 'default nil
  :font "JetBrainsMono Nerd Font"
  :height 120
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Overpass"
  :height 140
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrainsMono Nerd Font"
  :height 120
  :weight 'medium)

;; Make commented text and keywords italics.
(set-face-attribute 'font-lock-comment-face nil :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
(add-to-list 'default-frame-alist '(font . "JetBrains Mono-12"))
#+end_src


* Org mode
** Table of contents
#+begin_src elisp
(use-package toc-org
  :elpaca t
  :commands toc-org-enable
  :hook (org-mode . toc-org-enable))
#+end_src

** Org bullets
#+begin_src elisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets
  :elpaca t
  :hook (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src

** WYSIWYG
Disable WYSIWYG while mousing over in insert mode for easier editing.
#+begin_src elisp
(use-package org-appear
  :elpaca t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-hide-emphasis-markers t
        org-appear-autolinks t
        org-appear-trigger 'manual)

  ;; Additional hook for Evil mode integration
  :hook (org-mode . (lambda ()
                      (add-hook 'evil-insert-state-entry-hook
                                #'org-appear-manual-start
                                nil
                                t)
                      (add-hook 'evil-insert-state-exit-hook
                                #'org-appear-manual-stop
                                nil
                                t))))
#+end_src

** Visual tweaks
*** Different list characters per embedding level
[[https://emacs.stackexchange.com/a/45727]]

#+begin_src elisp
;; First
(font-lock-add-keywords 'org-mode
  '(("^\\(-\\) "
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
;; Second embedding
(font-lock-add-keywords 'org-mode
  `((,(concat "^[[:space:]]\\{" (number-to-string
                                (+ 2 org-list-indent-offset)) "\\}\\(-\\) ")
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
;; Third embedding
(font-lock-add-keywords 'org-mode
  `((,(concat "^[[:space:]]\\{" (number-to-string
                                (* 2 (+ 2 org-list-indent-offset))) "\\}\\(-\\) ")
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "▸"))))))
;; Forth embedding
(font-lock-add-keywords 'org-mode
  `((,(concat "^[[:space:]]\\{" (number-to-string
                                (* 3 (+ 2 org-list-indent-offset))) "\\}\\(-\\) ")
    (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "▹"))))))
#+end_src

*** Nice folding characters
#+begin_src elisp
(setq org-ellipsis " ▼ ")
#+end_src

*** Center Org buffers for readability
#+begin_src elisp
(use-package visual-fill-column
  :elpaca t
  :hook (org-mode . visual-fill-column-mode)
  :config
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t))
#+end_src
